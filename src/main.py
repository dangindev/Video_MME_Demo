# -*- coding: utf-8 -*-
import streamlit as st
import cv2
import os
import math
import shutil
import google.generativeai as genai
from dotenv import load_dotenv
from PIL import Image
import io
import tempfile # Th∆∞ vi·ªán ƒë·ªÉ t·∫°o file/th∆∞ m·ª•c t·∫°m

# --- Load API Key v√† C·∫•u h√¨nh Gemini (Gi·ªØ nguy√™n) ---
load_dotenv()
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')
if not GOOGLE_API_KEY:
    # Hi·ªÉn th·ªã l·ªói tr√™n giao di·ªán thay v√¨ print v√† exit
    st.error("L·ªói: Kh√¥ng t√¨m th·∫•y GOOGLE_API_KEY trong file .env. Vui l√≤ng t·∫°o file .env ·ªü th∆∞ m·ª•c g·ªëc v√† th√™m key v√†o.")
    st.stop() # D·ª´ng th·ª±c thi ·ª©ng d·ª•ng
try:
    genai.configure(api_key=GOOGLE_API_KEY)
except Exception as e:
    st.error(f"L·ªói khi c·∫•u h√¨nh Gemini API: {e}")
    st.stop()

def extract_and_save_frames(video_path, output_folder, interval_sec=1):
    frames = []
    video_capture = None
    try:
        if os.path.exists(output_folder):
            shutil.rmtree(output_folder)
        os.makedirs(output_folder, exist_ok=True)
        st.info(f"ƒê√£ t·∫°o th∆∞ m·ª•c l∆∞u khung h√¨nh t·∫°m: {output_folder}") # Th√¥ng b√°o tr√™n UI

        if not os.path.exists(video_path):
            st.error(f"L·ªói: File video kh√¥ng t·ªìn t·∫°i t·∫°i '{video_path}'")
            return None
        video_capture = cv2.VideoCapture(video_path)
        if not video_capture.isOpened():
            st.error(f"L·ªói: Kh√¥ng th·ªÉ m·ªü file video '{video_path}'")
            return None
        fps = video_capture.get(cv2.CAP_PROP_FPS)
        if fps <= 0:
            st.warning(f"C·∫£nh b√°o: Kh√¥ng th·ªÉ l·∫•y FPS h·ª£p l·ªá t·ª´ video '{video_path}'. Gi·∫£ s·ª≠ l√† 30.")
            fps = 30
        frame_interval = int(fps * interval_sec)
        if frame_interval <= 0:
            frame_interval = 1
        frame_count = 0
        saved_frame_count = 0

        progress_bar = st.progress(0, text="ƒêang tr√≠ch xu·∫•t khung h√¨nh...") # Th√™m thanh ti·∫øn tr√¨nh
        total_frames_approx = int(video_capture.get(cv2.CAP_PROP_FRAME_COUNT)) # ∆Ø·ªõc l∆∞·ª£ng t·ªïng s·ªë frame

        while True:
            success, frame = video_capture.read()
            if not success:
                break

            if frame_count % frame_interval == 0:
                frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                frames.append(frame_rgb)
                saved_frame_count += 1
                frame_filename = os.path.join(output_folder, f"frame_{saved_frame_count:04d}.jpg")
                try:
                    cv2.imwrite(frame_filename, frame)
                except Exception as write_e:
                    st.warning(f"Kh√¥ng th·ªÉ ghi file frame: {frame_filename} - L·ªói: {write_e}")


            frame_count += 1
            # C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh
            if total_frames_approx > 0:
                 progress = min(1.0, frame_count / total_frames_approx)
                 progress_bar.progress(progress, text=f"ƒêang tr√≠ch xu·∫•t khung h√¨nh... ({frame_count}/{total_frames_approx})")
            else:
                 progress_bar.progress(frame_count % 100 / 100.0 , text=f"ƒêang tr√≠ch xu·∫•t khung h√¨nh... (frame {frame_count})") # ∆Ø·ªõc l∆∞·ª£ng n·∫øu kh√¥ng c√≥ total_frames

        progress_bar.progress(1.0, text="Ho√†n th√†nh tr√≠ch xu·∫•t!")
        st.success(f"ƒê√£ tr√≠ch xu·∫•t v√† l∆∞u th√†nh c√¥ng {len(frames)} khung h√¨nh v√†o th∆∞ m·ª•c t·∫°m.")
        return frames

    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω video: {e}")
        return None
    finally:
        if video_capture:
            video_capture.release()
            st.info("ƒê√£ gi·∫£i ph√≥ng t√†i nguy√™n video.")


def ask_gemini_vision(prompt, frames):
    model_name = "gemini-1.5-flash-latest"
    try:
        model = genai.GenerativeModel(model_name) # Th·ª≠ l·∫°i v·ªõi flash
        st.info(f"ƒêang s·ª≠ d·ª•ng m√¥ h√¨nh: {model_name}")

        image_parts = []
        for frame_np in frames:
            try:
                pil_image = Image.fromarray(frame_np)
                image_parts.append(pil_image)
            except Exception as e:
                st.warning(f"L·ªói khi chuy·ªÉn ƒë·ªïi khung h√¨nh sang PIL Image: {e}")

        if not image_parts:
            st.error("L·ªói: Kh√¥ng c√≥ khung h√¨nh h·ª£p l·ªá ƒë·ªÉ g·ª≠i ƒë·∫øn API.")
            return None, model_name

        request_content = [prompt] + image_parts
        st.info(f"ƒêang g·ª≠i y√™u c·∫ßu ƒë·∫øn Gemini v·ªõi {len(image_parts)} khung h√¨nh...")

        # S·ª≠ d·ª•ng spinner ƒë·ªÉ cho bi·∫øt ƒëang ch·ªù API
        with st.spinner("ƒêang ch·ªù ph·∫£n h·ªìi t·ª´ Gemini..."):
            response = model.generate_content(request_content, stream=False,
                                             safety_settings={
                                                 'HATE': 'BLOCK_NONE', 'HARASSMENT': 'BLOCK_NONE',
                                                 'SEXUAL': 'BLOCK_NONE', 'DANGEROUS': 'BLOCK_NONE'
                                             })

        if not response.parts:
             if response.prompt_feedback.block_reason:
                 st.error(f"Y√™u c·∫ßu b·ªã ch·∫∑n do: {response.prompt_feedback.block_reason}")
             else:
                 st.error("L·ªói: API kh√¥ng tr·∫£ v·ªÅ n·ªôi dung n√†o.")
             return None, model_name

        answer_text = response.text
        st.success("ƒê√£ nh·∫≠n ph·∫£n h·ªìi t·ª´ Gemini.")
        return answer_text, model_name

    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói khi g·ªçi Gemini API: {e}")
        if hasattr(e, 'args') and e.args:
            st.error(f"Chi ti·∫øt l·ªói API: {e.args}")
        return None, None


# --- Giao di·ªán Streamlit ---
st.set_page_config(page_title="Demo Video-MME", layout="wide")
st.title("üé¨ Demo Ph√¢n t√≠ch Video v·ªõi Gemini (Video-MME)")
st.markdown("T·∫£i l√™n m·ªôt video, nh·∫≠p c√¢u h·ªèi v√† c√°c l·ª±a ch·ªçn, sau ƒë√≥ xem Gemini ph√¢n t√≠ch!")

# --- C·ªôt ch√≠nh ---
col1, col2 = st.columns([2, 1]) # Chia layout th√†nh 2 c·ªôt

with col1: # C·ªôt b√™n tr√°i cho upload v√† input
    st.header("1. T·∫£i Video L√™n")
    uploaded_file = st.file_uploader(
        "Ch·ªçn file video (MP4, AVI):",
        type=["mp4", "avi"],
        accept_multiple_files=False
    )

    if uploaded_file is not None:
        # Hi·ªÉn th·ªã video ƒë√£ t·∫£i l√™n
        st.video(uploaded_file)

        st.header("2. Nh·∫≠p C√¢u H·ªèi v√† L·ª±a Ch·ªçn")
        question = st.text_area("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n:", height=100)
        options = {}
        options['A'] = st.text_input("L·ª±a ch·ªçn A:")
        options['B'] = st.text_input("L·ª±a ch·ªçn B:")
        options['C'] = st.text_input("L·ª±a ch·ªçn C:")
        options['D'] = st.text_input("L·ª±a ch·ªçn D:")

        correct_answer = st.radio(
            "Ch·ªçn ƒë√°p √°n ƒë√∫ng:",
            ('A', 'B', 'C', 'D'),
            horizontal=True
        )

        st.header("3. C·∫•u h√¨nh (T√πy ch·ªçn)")
        frame_interval_seconds = st.slider(
            "Kho·∫£ng c√°ch gi·ªØa c√°c khung h√¨nh (gi√¢y):",
            min_value=0.5, max_value=10.0, value=1.0, step=0.5
        )
        MAX_FRAMES_TO_SEND = st.number_input(
             "S·ªë khung h√¨nh t·ªëi ƒëa g·ª≠i ƒë·∫øn API:",
             min_value=5, max_value=100, value=50, step=5
        )

        # N√∫t ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch
        analyze_button = st.button("üöÄ B·∫Øt ƒë·∫ßu Ph√¢n t√≠ch Video", type="primary", use_container_width=True)

    else:
        st.info("Vui l√≤ng t·∫£i l√™n m·ªôt file video ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
        analyze_button = False # Kh√¥ng hi·ªÉn th·ªã n√∫t n·∫øu ch∆∞a c√≥ video


with col2: # C·ªôt b√™n ph·∫£i cho k·∫øt qu·∫£
    st.header("üìà K·∫øt Qu·∫£ Ph√¢n T√≠ch")

    if analyze_button:
        # --- Ki·ªÉm tra ƒë·∫ßu v√†o ---
        if not question or not all(options.values()):
            st.warning("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß c√¢u h·ªèi v√† t·∫•t c·∫£ c√°c l·ª±a ch·ªçn.")
        else:
            # --- X·ª≠ l√Ω ---
            st.info("B·∫Øt ƒë·∫ßu qu√° tr√¨nh x·ª≠ l√Ω...")

            # T·∫°o th∆∞ m·ª•c t·∫°m ƒë·ªÉ l∆∞u video v√† frames
            with tempfile.TemporaryDirectory() as temp_dir:
                # L∆∞u video t·∫£i l√™n v√†o file t·∫°m
                temp_video_path = os.path.join(temp_dir, uploaded_file.name)
                with open(temp_video_path, "wb") as f:
                    f.write(uploaded_file.getbuffer())
                st.info(f"ƒê√£ l∆∞u video t·∫°m th·ªùi t·∫°i: {temp_video_path}")

                # T·∫°o th∆∞ m·ª•c con ƒë·ªÉ l∆∞u frame trong th∆∞ m·ª•c t·∫°m
                frame_output_folder = os.path.join(temp_dir, "extracted_frames")

                # --- B∆∞·ªõc 1: Tr√≠ch xu·∫•t v√† l∆∞u khung h√¨nh ---
                with st.spinner("ƒêang tr√≠ch xu·∫•t khung h√¨nh..."):
                     extracted_frames = extract_and_save_frames(temp_video_path, frame_output_folder, frame_interval_seconds)

                if extracted_frames:
                    st.success(f"ƒê√£ tr√≠ch xu·∫•t {len(extracted_frames)} khung h√¨nh.")

                    # Hi·ªÉn th·ªã m·ªôt v√†i khung h√¨nh m·∫´u
                    st.subheader("Khung h√¨nh m·∫´u:")
                    num_frames_to_show = min(len(extracted_frames), 6) # Hi·ªÉn th·ªã t·ªëi ƒëa 6 frame
                    sample_indices = [int(i * (len(extracted_frames)-1) / (num_frames_to_show-1)) for i in range(num_frames_to_show)] if num_frames_to_show > 1 else [0]
                    frame_cols = st.columns(num_frames_to_show)
                    for i, idx in enumerate(sample_indices):
                         with frame_cols[i]:
                             st.image(extracted_frames[idx], caption=f"Frame ~{idx*frame_interval_seconds:.1f}s", use_container_width=True)


                    # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng khung h√¨nh g·ª≠i ƒëi
                    if len(extracted_frames) > MAX_FRAMES_TO_SEND:
                        st.info(f"Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng khung h√¨nh g·ª≠i ƒëi l√† {MAX_FRAMES_TO_SEND}")
                        indices = [int(i * (len(extracted_frames)-1) / (MAX_FRAMES_TO_SEND-1)) for i in range(MAX_FRAMES_TO_SEND)]
                        frames_to_send = [extracted_frames[i] for i in indices]
                    else:
                        frames_to_send = extracted_frames

                    # --- B∆∞·ªõc 2: Chu·∫©n b·ªã Prompt v√† G·ªçi Gemini API ---
                    st.subheader("G·ªçi Gemini API")
                    prompt_text = f"""
Ph√¢n t√≠ch c√°c khung h√¨nh ƒë∆∞·ª£c cung c·∫•p t·ª´ m·ªôt video.
D·ª±a CH·ªà v√†o n·ªôi dung trong c√°c khung h√¨nh n√†y, h√£y tr·∫£ l·ªùi c√¢u h·ªèi tr·∫Øc nghi·ªám sau:

C√¢u h·ªèi: {question}

C√°c l·ª±a ch·ªçn:
A: {options['A']}
B: {options['B']}
C: {options['C']}
D: {options['D']}

Ch·ªâ tr·∫£ l·ªùi b·∫±ng M·ªòT ch·ªØ c√°i duy nh·∫•t (A, B, C, ho·∫∑c D) ƒë·∫°i di·ªán cho l·ª±a ch·ªçn ƒë√∫ng nh·∫•t. Kh√¥ng gi·∫£i th√≠ch g√¨ th√™m.
"""
                    with st.expander("Xem Prompt ƒë√£ g·ª≠i"):
                        st.text(prompt_text)

                    # G·ªçi h√†m API
                    gemini_response_text, used_model_name = ask_gemini_vision(prompt_text, frames_to_send)

                    # --- B∆∞·ªõc 3: Hi·ªÉn th·ªã k·∫øt qu·∫£ chi ti·∫øt ---
                    st.subheader("K·∫øt qu·∫£ t·ª´ Gemini")
                    st.write(f"**C√¢u h·ªèi:** {question}")
                    st.write("**L·ª±a ch·ªçn:**")
                    for key, value in options.items():
                        st.write(f"¬†¬†¬†¬†{key}: {value}")
                    st.write(f"**ƒê√°p √°n ƒë√∫ng (b·∫°n ƒë√£ ch·ªçn):** {correct_answer}")

                    if gemini_response_text is not None and used_model_name is not None:
                        model_answer = gemini_response_text.strip().upper()
                        final_answer = ""
                        if model_answer and model_answer[0] in ["A", "B", "C", "D"]:
                            final_answer = model_answer[0]
                            st.write(f"**C√¢u tr·∫£ l·ªùi t·ª´ Gemini ({used_model_name}):**")
                            st.code(final_answer, language=None) # Hi·ªÉn th·ªã r√µ r√†ng h∆°n

                            if final_answer == correct_answer:
                                st.success("‚úÖ K·∫øt qu·∫£ ƒê√öNG!")
                            else:
                                st.error(f"‚ùå K·∫øt qu·∫£ SAI. (Gemini ch·ªçn {final_answer}, ƒë√∫ng l√† {correct_answer})")
                        else:
                            st.warning(f"Gemini ({used_model_name}) tr·∫£ v·ªÅ kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng mong ƒë·ª£i:")
                            st.text(gemini_response_text)
                    elif used_model_name is not None:
                        st.error(f"Kh√¥ng nh·∫≠n ƒë∆∞·ª£c c√¢u tr·∫£ l·ªùi t·ª´ Gemini ({used_model_name}) do l·ªói.")
                    else:
                        st.error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c c√¢u tr·∫£ l·ªùi t·ª´ Gemini do l·ªói nghi√™m tr·ªçng.")

                else:
                    st.error("Kh√¥ng th·ªÉ tr√≠ch xu·∫•t khung h√¨nh t·ª´ video ƒë√£ t·∫£i l√™n.")

